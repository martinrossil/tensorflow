
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
function randomizeLevel(level) {
  for (let i = 0; i < level.inputs.length; i++) {
    for (let j = 0; j < level.outputs.length; j++) {
      level.weights[i][j] = randomMinusOneAndOne();
    }
  }
  for (let i = 0; i < level.biases.length; i++) {
    level.biases[i] = randomMinusOneAndOne();
  }
}
function randomMinusOneAndOne() {
  return parseFloat((Math.random() * 2 - 1).toFixed(1));
}

class Level {
  // input neurons.
  inputs;
  // output neurons.
  outputs;
  // biases is above what value the output neurons will fire.
  biases;
  // weights are Arrays of values of the connection between input- and output neurons.
  weights;
  constructor(inputCount, outputCount) {
    this.inputs = new Array(inputCount);
    this.outputs = new Array(outputCount);
    this.biases = new Array(outputCount);
    this.weights = [];
    for (let i = 0; i < inputCount; i++) {
      this.weights[i] = new Array(outputCount);
    }
    randomizeLevel(this);
  }
}

class NeuralNetwork extends HTMLElement {
  constructor() {
    super();
    console.log("NeuralNetwork()");
    const level = new Level(4, 4);
    console.log(level);
  }
}
customElements.define("neural-network", NeuralNetwork);

export { NeuralNetwork as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2LmpzIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiLCIuLi9zcmMvTGV2ZWwudHMiLCIuLi9zcmMvTmV1cmFsTmV0d29yay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSUxldmVsIGZyb20gJy4vSUxldmVsJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21pemVMZXZlbChsZXZlbDogSUxldmVsKSB7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZXZlbC5pbnB1dHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdGZvciAobGV0IGogPSAwOyBqIDwgbGV2ZWwub3V0cHV0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRsZXZlbC53ZWlnaHRzW2ldW2pdID0gcmFuZG9tTWludXNPbmVBbmRPbmUoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGV2ZWwuYmlhc2VzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRsZXZlbC5iaWFzZXNbaV0gPSByYW5kb21NaW51c09uZUFuZE9uZSgpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbU1pbnVzT25lQW5kT25lKCkge1xyXG5cdHJldHVybiBwYXJzZUZsb2F0KCgoTWF0aC5yYW5kb20oKSAqIDIpIC0gMSkudG9GaXhlZCgxKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZWVkRm9yd2FyZChzZW5zb3JzOiBudW1iZXJbXSwgbGV2ZWw6IElMZXZlbCkge1xyXG5cdC8vIHNldCB0aGUgaW5wdXRzIHRvIHRoZSBzZW5zb3IgdmFsdWVzLlxyXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGV2ZWwuaW5wdXRzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRsZXZlbC5pbnB1dHNbaV0gPSBzZW5zb3JzW2ldO1xyXG5cdH1cclxuXHJcblx0Ly8gbG9vcCBvdmVyIG91dHB1dHMgYW5kIGNhbGN1bGF0ZSBhIHN1bSBvZiB2YWx1ZSBvZiB0aGUgaW5wdXRzIGFuZCB3ZWlnaHRzLlxyXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGV2ZWwub3V0cHV0cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0bGV0IHN1bSA9IDA7XHJcblx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGxldmVsLmlucHV0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRzdW0gKz0gbGV2ZWwuaW5wdXRzW2pdICogbGV2ZWwud2VpZ2h0c1tqXVtpXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc3VtID4gbGV2ZWwuYmlhc2VzW2ldKSB7XHJcblx0XHRcdGxldmVsLm91dHB1dHNbaV0gPSAxO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGV2ZWwub3V0cHV0c1tpXSA9IDA7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbGV2ZWwub3V0cHV0cztcclxufVxyXG4iLCJpbXBvcnQgSUxldmVsIGZyb20gJy4vSUxldmVsJztcclxuaW1wb3J0IHsgcmFuZG9taXplTGV2ZWwgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExldmVsIGltcGxlbWVudHMgSUxldmVsIHtcclxuXHQvLyBpbnB1dCBuZXVyb25zLlxyXG5cdHB1YmxpYyBpbnB1dHM6IG51bWJlcltdO1xyXG5cdC8vIG91dHB1dCBuZXVyb25zLlxyXG5cdHB1YmxpYyBvdXRwdXRzOiBudW1iZXJbXTtcclxuXHQvLyBiaWFzZXMgaXMgYWJvdmUgd2hhdCB2YWx1ZSB0aGUgb3V0cHV0IG5ldXJvbnMgd2lsbCBmaXJlLlxyXG5cdHB1YmxpYyBiaWFzZXM6IG51bWJlcltdO1xyXG5cdC8vIHdlaWdodHMgYXJlIEFycmF5cyBvZiB2YWx1ZXMgb2YgdGhlIGNvbm5lY3Rpb24gYmV0d2VlbiBpbnB1dC0gYW5kIG91dHB1dCBuZXVyb25zLlxyXG5cdHB1YmxpYyB3ZWlnaHRzOiBudW1iZXJbXVtdO1xyXG5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IoaW5wdXRDb3VudDogbnVtYmVyLCBvdXRwdXRDb3VudDogbnVtYmVyKSB7XHJcblx0XHR0aGlzLmlucHV0cyA9IG5ldyBBcnJheShpbnB1dENvdW50KTtcclxuXHRcdHRoaXMub3V0cHV0cyA9IG5ldyBBcnJheShvdXRwdXRDb3VudCk7XHJcblx0XHR0aGlzLmJpYXNlcyA9IG5ldyBBcnJheShvdXRwdXRDb3VudCk7XHJcblx0XHR0aGlzLndlaWdodHMgPSBbXTtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xyXG5cdFx0XHR0aGlzLndlaWdodHNbaV0gPSBuZXcgQXJyYXkob3V0cHV0Q291bnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJhbmRvbWl6ZUxldmVsKHRoaXMpO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgTGV2ZWwgZnJvbSAnLi9MZXZlbCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXVyYWxOZXR3b3JrIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHRjb25zb2xlLmxvZygnTmV1cmFsTmV0d29yaygpJyk7XHJcblx0XHRjb25zdCBsZXZlbCA9IG5ldyBMZXZlbCg0LCA0KTtcclxuXHRcdGNvbnNvbGUubG9nKGxldmVsKTtcclxuXHR9XHJcbn1cclxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCduZXVyYWwtbmV0d29yaycsIE5ldXJhbE5ldHdvcmspO1xyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFTyxTQUFTLGVBQWUsS0FBZSxFQUFBO0FBQzdDLEVBQUEsS0FBQSxJQUFTLElBQUksQ0FBRyxFQUFBLENBQUEsR0FBSSxLQUFNLENBQUEsTUFBQSxDQUFPLFFBQVEsQ0FBSyxFQUFBLEVBQUE7QUFDN0MsSUFBQSxLQUFBLElBQVMsSUFBSSxDQUFHLEVBQUEsQ0FBQSxHQUFJLEtBQU0sQ0FBQSxPQUFBLENBQVEsUUFBUSxDQUFLLEVBQUEsRUFBQTtBQUM5QyxNQUFBLEtBQUEsQ0FBTSxPQUFRLENBQUEsQ0FBQyxDQUFFLENBQUEsQ0FBQyxJQUFJLG9CQUFxQixFQUFBLENBQUE7QUFBQSxLQUM1QztBQUFBLEdBQ0Q7QUFFQSxFQUFBLEtBQUEsSUFBUyxJQUFJLENBQUcsRUFBQSxDQUFBLEdBQUksS0FBTSxDQUFBLE1BQUEsQ0FBTyxRQUFRLENBQUssRUFBQSxFQUFBO0FBQzdDLElBQU0sS0FBQSxDQUFBLE1BQUEsQ0FBTyxDQUFDLENBQUEsR0FBSSxvQkFBcUIsRUFBQSxDQUFBO0FBQUEsR0FDeEM7QUFDRCxDQUFBO0FBRU8sU0FBUyxvQkFBdUIsR0FBQTtBQUN0QyxFQUFPLE9BQUEsVUFBQSxDQUFBLENBQWEsS0FBSyxNQUFPLEVBQUEsR0FBSSxJQUFLLENBQUcsRUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBQTtBQUN2RDs7QUNiQSxNQUFxQixLQUF3QixDQUFBO0FBQUE7QUFBQSxFQUVyQyxNQUFBLENBQUE7QUFBQTtBQUFBLEVBRUEsT0FBQSxDQUFBO0FBQUE7QUFBQSxFQUVBLE1BQUEsQ0FBQTtBQUFBO0FBQUEsRUFFQSxPQUFBLENBQUE7QUFBQSxFQUVBLFdBQUEsQ0FBWSxZQUFvQixXQUFxQixFQUFBO0FBQzNELElBQUssSUFBQSxDQUFBLE1BQUEsR0FBUyxJQUFJLEtBQUEsQ0FBTSxVQUFVLENBQUEsQ0FBQTtBQUNsQyxJQUFLLElBQUEsQ0FBQSxPQUFBLEdBQVUsSUFBSSxLQUFBLENBQU0sV0FBVyxDQUFBLENBQUE7QUFDcEMsSUFBSyxJQUFBLENBQUEsTUFBQSxHQUFTLElBQUksS0FBQSxDQUFNLFdBQVcsQ0FBQSxDQUFBO0FBQ25DLElBQUEsSUFBQSxDQUFLLFVBQVUsRUFBQyxDQUFBO0FBRWhCLElBQUEsS0FBQSxJQUFTLENBQUksR0FBQSxDQUFBLEVBQUcsQ0FBSSxHQUFBLFVBQUEsRUFBWSxDQUFLLEVBQUEsRUFBQTtBQUNwQyxNQUFBLElBQUEsQ0FBSyxPQUFRLENBQUEsQ0FBQyxDQUFJLEdBQUEsSUFBSSxNQUFNLFdBQVcsQ0FBQSxDQUFBO0FBQUEsS0FDeEM7QUFFQSxJQUFBLGNBQUEsQ0FBZSxJQUFJLENBQUEsQ0FBQTtBQUFBLEdBQ3BCO0FBQ0Q7O0FDdkJBLE1BQXFCLHNCQUFzQixXQUFZLENBQUE7QUFBQSxFQUMvQyxXQUFjLEdBQUE7QUFDcEIsSUFBTSxLQUFBLEVBQUEsQ0FBQTtBQUNOLElBQUEsT0FBQSxDQUFRLElBQUksaUJBQWlCLENBQUEsQ0FBQTtBQUM3QixJQUFBLE1BQU0sS0FBUSxHQUFBLElBQUksS0FBTSxDQUFBLENBQUEsRUFBRyxDQUFDLENBQUEsQ0FBQTtBQUM1QixJQUFBLE9BQUEsQ0FBUSxJQUFJLEtBQUssQ0FBQSxDQUFBO0FBQUEsR0FDbEI7QUFDRCxDQUFBO0FBQ0EsY0FBZSxDQUFBLE1BQUEsQ0FBTyxrQkFBa0IsYUFBYSxDQUFBOzs7OyJ9
